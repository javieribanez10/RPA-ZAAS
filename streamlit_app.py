#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Interfaz web con Streamlit para el RPA de Nubox.
Permite configurar par√°metros de reportes de forma amigable.
"""

import streamlit as st
import pandas as pd
import datetime
import time
import sys
import os
import io
import logging
from pathlib import Path

# Agregar el directorio ra√≠z al path para importar m√≥dulos
sys.path.append(str(Path(__file__).parent))

from services.nubox_service import NuboxService
from config.settings import setup_config
from utils.logger import setup_logger

# Configurar logger global
logger = logging.getLogger("nubox_rpa.streamlit")

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="RPA Nubox - Extractor de Reportes",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .section-header {
        font-size: 1.5rem;
        color: #2e86ab;
        margin-top: 2rem;
        margin-bottom: 1rem;
        border-bottom: 2px solid #2e86ab;
        padding-bottom: 0.5rem;
    }
    .status-success {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
    }
    .status-error {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
    }
    .status-info {
        background-color: #d1ecf1;
        border: 1px solid #bee5eb;
        color: #0c5460;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

def initialize_session_state():
    """Inicializa el estado de la sesi√≥n de Streamlit."""
    if 'nubox_service' not in st.session_state:
        st.session_state.nubox_service = None
    if 'logged_in' not in st.session_state:
        st.session_state.logged_in = False
    if 'navigation_complete' not in st.session_state:
        st.session_state.navigation_complete = False
    if 'dropdown_options' not in st.session_state:
        st.session_state.dropdown_options = {}
    if 'report_generated' not in st.session_state:
        st.session_state.report_generated = False

def sidebar_configuration():
    """Configuraci√≥n en la barra lateral."""
    st.sidebar.markdown("## ‚öôÔ∏è Configuraci√≥n")
    
    # Configuraci√≥n del navegador
    st.sidebar.markdown("### Navegador")
    headless = st.sidebar.checkbox("Modo headless (sin ventana)", value=True, 
                                  help="Ejecutar el navegador en segundo plano")
    timeout = st.sidebar.slider("Timeout (segundos)", min_value=10, max_value=60, value=30,
                               help="Tiempo m√°ximo de espera para operaciones")
    
    # Informaci√≥n del sistema
    st.sidebar.markdown("### üìã Estado del Sistema")
    if st.session_state.logged_in:
        st.sidebar.success("‚úÖ Conectado a Nubox")
    else:
        st.sidebar.error("‚ùå No conectado")
    
    if st.session_state.navigation_complete:
        st.sidebar.success("‚úÖ Navegaci√≥n completada")
    else:
        st.sidebar.warning("‚è≥ Esperando navegaci√≥n")
    
    return headless, timeout

def login_section():
    """Secci√≥n de login."""
    st.markdown('<h2 class="section-header">üîê Credenciales de Nubox</h2>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        username = st.text_input("RUT de usuario", placeholder="12345678-9",
                                help="Ingresa tu RUT sin puntos, con gui√≥n")
    
    with col2:
        password = st.text_input("Contrase√±a", type="password",
                                help="Tu contrase√±a de Nubox")
    
    # URL personalizada (avanzado)
    with st.expander("‚öôÔ∏è Configuraci√≥n avanzada"):
        custom_url = st.text_input("URL de Nubox (opcional)", 
                                  value="https://web.nubox.com/Login/Account/Login?ReturnUrl=%2FSistemaLogin",
                                  help="URL personalizada de login")
    
    return username, password, custom_url

def report_parameters_section():
    """Secci√≥n de configuraci√≥n de par√°metros del reporte."""
    st.markdown('<h2 class="section-header">üìä Configuraci√≥n del Reporte</h2>', unsafe_allow_html=True)
    
    # Configuraci√≥n de fechas
    st.markdown("### üìÖ Per√≠odo del Reporte")
    col1, col2 = st.columns(2)
    
    with col1:
        fecha_desde = st.date_input("Fecha desde", 
                                   value=datetime.date(2025, 1, 1),
                                   help="Fecha de inicio del reporte")
    
    with col2:
        fecha_hasta = st.date_input("Fecha hasta", 
                                   value=datetime.date.today(),
                                   help="Fecha de fin del reporte")
    
    # Dropdowns din√°micos
    st.markdown("### üîΩ Configuraci√≥n de Par√°metros")
    
    dropdown_selections = {}
    selected_accounts = []  # Para manejar m√∫ltiples cuentas
    selected_companies = []  # Para manejar m√∫ltiples empresas
    
    if st.session_state.dropdown_options:
        for dropdown_name, dropdown_info in st.session_state.dropdown_options.items():
            options = dropdown_info.get('options', [])
            current_selected = dropdown_info.get('selected', '')
            
            # Tratamiento especial para "Empresa" - permitir selecci√≥n m√∫ltiple
            if dropdown_name == "Empresa":
                st.markdown("#### üè¢ Selecci√≥n de Empresas")
                
                # Opci√≥n para seleccionar m√∫ltiples empresas
                multi_company_mode = st.checkbox(
                    "üè≠ Generar reportes para m√∫ltiples empresas",
                    value=False,
                    help="Activa esta opci√≥n para seleccionar varias empresas y generar reportes para cada una",
                    key="multi_company_checkbox"
                )
                
                if multi_company_mode:
                    # Multiselect para empresas
                    selected_companies = st.multiselect(
                        "**Selecciona las empresas**",
                        options=options,
                        default=[current_selected] if current_selected in options else [],
                        help="Puedes seleccionar m√∫ltiples empresas. Se generar√°n reportes para cada combinaci√≥n empresa-cuenta.",
                        key="multiselect_empresa"
                    )
                    
                    # Informaci√≥n sobre cu√°ntos reportes se generar√°n (esto se actualizar√° despu√©s de seleccionar cuentas)
                    if selected_companies:
                        st.info(f"‚ÑπÔ∏è Empresas seleccionadas: **{len(selected_companies)}**")
                        
                        # Mostrar vista previa de las empresas seleccionadas
                        with st.expander("üëÄ Vista previa de empresas seleccionadas"):
                            for i, company in enumerate(selected_companies, 1):
                                st.write(f"{i}. {company}")
                        
                        # Para compatibilidad, usar la primera empresa como selecci√≥n principal
                        dropdown_selections[dropdown_name] = selected_companies[0]
                    else:
                        st.warning("‚ö†Ô∏è Selecciona al menos una empresa.")
                        # Si no hay selecci√≥n, usar la opci√≥n por defecto
                        dropdown_selections[dropdown_name] = current_selected
                        selected_companies = [current_selected] if current_selected else []
                else:
                    # Modo de una sola empresa (original)
                    try:
                        default_index = options.index(current_selected) if current_selected in options else 0
                    except ValueError:
                        default_index = 0
                    
                    selected_option = st.selectbox(
                        f"**{dropdown_name}**",
                        options=options,
                        index=default_index,
                        help=f"Selecciona una opci√≥n para {dropdown_name}",
                        key="selectbox_empresa"
                    )
                    
                    dropdown_selections[dropdown_name] = selected_option
                    selected_companies = [selected_option]  # Una sola empresa
                    
            # Tratamiento especial para "Cuenta Contable" - permitir selecci√≥n m√∫ltiple
            elif dropdown_name == "Cuenta Contable":
                st.markdown("#### üí∞ Selecci√≥n de Cuentas Contables")
                
                # Opci√≥n para seleccionar m√∫ltiples cuentas
                multi_account_mode = st.checkbox(
                    "üî¢ Generar reportes para m√∫ltiples cuentas",
                    value=False,
                    help="Activa esta opci√≥n para seleccionar varias cuentas y generar un reporte por cada una",
                    key="multi_account_checkbox"
                )
                
                if multi_account_mode:
                    # Multiselect para cuentas
                    selected_accounts = st.multiselect(
                        "**Selecciona las cuentas contables**",
                        options=options,
                        default=[current_selected] if current_selected in options else [],
                        help="Puedes seleccionar m√∫ltiples cuentas. Se generar√° un reporte por cada cuenta.",
                        key="multiselect_cuenta_contable"
                    )
                    
                    # Informaci√≥n sobre cu√°ntos reportes se generar√°n
                    if selected_accounts:
                        # Calcular total de reportes basado en empresas y cuentas seleccionadas
                        total_reports = len(selected_companies) * len(selected_accounts)
                        st.info(f"‚ÑπÔ∏è Se generar√°n **{total_reports}** reportes total ({len(selected_companies)} empresas √ó {len(selected_accounts)} cuentas).")
                        
                        # Mostrar vista previa de las cuentas seleccionadas
                        with st.expander("üëÄ Vista previa de cuentas seleccionadas"):
                            for i, account in enumerate(selected_accounts, 1):
                                st.write(f"{i}. {account}")
                        
                        # Para compatibilidad, usar la primera cuenta como selecci√≥n principal
                        dropdown_selections[dropdown_name] = selected_accounts[0]
                    else:
                        st.warning("‚ö†Ô∏è Selecciona al menos una cuenta contable.")
                        # Si no hay selecci√≥n, usar la opci√≥n por defecto
                        dropdown_selections[dropdown_name] = current_selected
                        selected_accounts = [current_selected] if current_selected else []
                else:
                    # Modo de una sola cuenta (original)
                    try:
                        default_index = options.index(current_selected) if current_selected in options else 0
                    except ValueError:
                        default_index = 0
                    
                    selected_option = st.selectbox(
                        f"**{dropdown_name}**",
                        options=options,
                        index=default_index,
                        help=f"Selecciona una opci√≥n para {dropdown_name}",
                        key="selectbox_cuenta_contable"
                    )
                    
                    dropdown_selections[dropdown_name] = selected_option
                    selected_accounts = [selected_option]  # Una sola cuenta
            else:
                # Para otros dropdowns, mantener comportamiento original
                try:
                    default_index = options.index(current_selected) if current_selected in options else 0
                except ValueError:
                    default_index = 0
                
                selected_option = st.selectbox(
                    f"**{dropdown_name}**",
                    options=options,
                    index=default_index,
                    help=f"Selecciona una opci√≥n para {dropdown_name}",
                    key=f"dropdown_{dropdown_name.lower().replace(' ', '_')}"
                )
                
                dropdown_selections[dropdown_name] = selected_option
    else:
        st.info("‚ÑπÔ∏è Los par√°metros se cargar√°n despu√©s de conectar con Nubox y navegar al reporte.")
    
    # Validaciones por defecto si no hay selecciones
    if not selected_accounts and st.session_state.dropdown_options:
        # Si no hay cuentas seleccionadas pero tenemos opciones, usar la primera como fallback
        cuenta_info = st.session_state.dropdown_options.get("Cuenta Contable", {})
        if cuenta_info.get('options'):
            selected_accounts = [cuenta_info['options'][0]]
            dropdown_selections["Cuenta Contable"] = cuenta_info['options'][0]
    
    if not selected_companies and st.session_state.dropdown_options:
        # Si no hay empresas seleccionadas pero tenemos opciones, usar la primera como fallback
        empresa_info = st.session_state.dropdown_options.get("Empresa", {})
        if empresa_info.get('options'):
            selected_companies = [empresa_info['options'][0]]
            dropdown_selections["Empresa"] = empresa_info['options'][0]
    
    # Mostrar resumen de la configuraci√≥n m√∫ltiple si aplica
    if len(selected_companies) > 1 or len(selected_accounts) > 1:
        st.markdown("### üìã Resumen de Configuraci√≥n M√∫ltiple")
        
        total_reports = len(selected_companies) * len(selected_accounts)
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("üè¢ Empresas", len(selected_companies))
        with col2:
            st.metric("üí∞ Cuentas", len(selected_accounts))
        with col3:
            st.metric("üìä Total Reportes", total_reports)
        
        if total_reports > 10:
            st.warning(f"‚ö†Ô∏è Se generar√°n {total_reports} reportes. Este proceso puede tomar considerable tiempo.")
        elif total_reports > 5:
            st.info(f"‚ÑπÔ∏è Se generar√°n {total_reports} reportes. El proceso ser√° autom√°tico.")
        else:
            st.success(f"‚úÖ Se generar√°n {total_reports} reportes.")
    
    return fecha_desde, fecha_hasta, dropdown_selections, selected_accounts, selected_companies

def progress_section():
    """Secci√≥n de progreso y logs."""
    st.markdown('<h2 class="section-header">üìà Progreso</h2>', unsafe_allow_html=True)
    
    # Contenedor para el progreso
    progress_container = st.container()
    
    # Contenedor para logs
    log_container = st.expander("üìù Ver logs detallados", expanded=False)
    
    return progress_container, log_container

def execute_rpa_process(username, password, custom_url, fecha_desde, fecha_hasta, 
                       dropdown_selections, selected_accounts, headless, timeout, progress_container, log_container):
    """Ejecuta el proceso RPA completo, con soporte para m√∫ltiples cuentas."""
    
    try:
        # Configurar logger
        logger = setup_logger()
        config = setup_config()
        
        # Determinar si es procesamiento m√∫ltiple
        is_multiple_accounts = len(selected_accounts) > 1
        
        with progress_container:
            # Barra de progreso general
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            # Paso 1: Inicializar servicio
            status_text.text("üîÑ Inicializando servicio Nubox...")
            progress_bar.progress(5)
            
            if not st.session_state.nubox_service:
                st.session_state.nubox_service = NuboxService(headless=headless, timeout=timeout)
            
            with log_container:
                st.text("‚úÖ Servicio Nubox inicializado")
            
            # Paso 2: Login
            if not st.session_state.logged_in:
                status_text.text("üîê Iniciando sesi√≥n en Nubox...")
                progress_bar.progress(15)
                
                login_success = st.session_state.nubox_service.login(username, password, custom_url)
                
                if login_success:
                    st.session_state.logged_in = True
                    with log_container:
                        st.text("‚úÖ Login exitoso")
                    
                    st.success("üéâ ¬°Conectado exitosamente a Nubox!")
                else:
                    with log_container:
                        st.text("‚ùå Error en login")
                    st.error("‚ùå Error al conectar con Nubox. Verifica tus credenciales.")
                    return False
            
            # Paso 3: Navegaci√≥n
            if not st.session_state.navigation_complete:
                status_text.text("üß≠ Navegando al reporte Mayor...")
                progress_bar.progress(25)
                
                navigation_success = st.session_state.nubox_service.navigate_to_report()
                
                if navigation_success:
                    st.session_state.navigation_complete = True
                    with log_container:
                        st.text("‚úÖ Navegaci√≥n completada")
                    
                    # Cargar opciones de dropdowns
                    status_text.text("üìã Cargando opciones de par√°metros...")
                    progress_bar.progress(35)
                    
                    load_dropdown_options()
                    
                    with log_container:
                        st.text("‚úÖ Opciones de par√°metros cargadas")
                    
                    st.success("üéØ ¬°Navegaci√≥n completada! Ahora puedes configurar los par√°metros del reporte.")
                    st.rerun()
                    
                else:
                    with log_container:
                        st.text("‚ùå Error en navegaci√≥n")
                    st.error("‚ùå Error al navegar al reporte. Intenta nuevamente.")
                    return False
            
            # Verificar que tengamos par√°metros de configuraci√≥n
            if not st.session_state.navigation_complete or not dropdown_selections:
                st.warning("‚ö†Ô∏è Primero debes completar la navegaci√≥n y configurar los par√°metros.")
                return False
            
            # Preparar par√°metros base
            base_params = {
                'fecha_desde': fecha_desde.strftime("%d/%m/%Y"),
                'fecha_hasta': fecha_hasta.strftime("%d/%m/%Y"),
                'dropdown_selections': dropdown_selections
            }
            
            # Procesar seg√∫n el modo (una cuenta o m√∫ltiples)
            if is_multiple_accounts:
                # MODO M√öLTIPLES CUENTAS
                status_text.text(f"üìä Procesando {len(selected_accounts)} cuentas contables...")
                progress_bar.progress(45)
                
                with log_container:
                    st.text(f"üî¢ Iniciando procesamiento de {len(selected_accounts)} cuentas")
                    for i, account in enumerate(selected_accounts, 1):
                        st.text(f"  {i}. {account}")
                
                # Llamar al m√©todo de extracci√≥n m√∫ltiple
                results = st.session_state.nubox_service.extract_multiple_reports_by_account(
                    base_params, selected_accounts
                )
                
                progress_bar.progress(95)
                
                # Procesar y mostrar resultados m√∫ltiples
                if results and '_summary' in results:
                    summary = results['_summary']
                    
                    with log_container:
                        st.text(f"‚úÖ Extracci√≥n completada:")
                        st.text(f"  - Total de cuentas: {summary['total_accounts']}")
                        st.text(f"  - Exitosas: {summary['successful_extractions']}")
                        st.text(f"  - Fallidas: {summary['failed_extractions']}")
                        st.text(f"  - Tasa de √©xito: {summary['success_rate']:.1f}%")
                    
                    progress_bar.progress(100)
                    status_text.text("‚úÖ ¬°Proceso de m√∫ltiples reportes completado!")
                    
                    # Mostrar resultados m√∫ltiples
                    show_multiple_results(results, selected_accounts)
                    
                    return True
                else:
                    with log_container:
                        st.text("‚ùå Error en la extracci√≥n de reportes m√∫ltiples")
                    st.error("‚ùå No se pudieron extraer los reportes.")
                    return False
                    
            else:
                # MODO UNA SOLA CUENTA
                status_text.text("‚öôÔ∏è Configurando par√°metros del reporte...")
                progress_bar.progress(50)
                
                # Configurar par√°metros usando el m√©todo automatizado
                config_success = configure_parameters_programmatically(base_params, log_container)
                
                if config_success:
                    with log_container:
                        st.text("‚úÖ Par√°metros configurados correctamente")
                    progress_bar.progress(75)
                else:
                    with log_container:
                        st.text("‚ùå Error al configurar par√°metros")
                    st.error("‚ùå Error al configurar par√°metros del reporte.")
                    return False
                
                # Generar y extraer reporte √∫nico
                status_text.text("üìä Generando y extrayendo reporte...")
                progress_bar.progress(90)
                
                report_data = st.session_state.nubox_service.extract_report()
                
                if isinstance(report_data, tuple):
                    df, file_path = report_data
                else:
                    df = report_data
                    file_path = None
                
                progress_bar.progress(100)
                status_text.text("‚úÖ ¬°Proceso completado!")
                
                with log_container:
                    st.text("‚úÖ Reporte extra√≠do exitosamente")
                
                st.session_state.report_generated = True
                
                # Mostrar resultados √∫nicos
                show_results(df, file_path)
                
                return True
            
    except Exception as e:
        with log_container:
            st.text(f"‚ùå Error general: {str(e)}")
        st.error(f"‚ùå Error durante la ejecuci√≥n: {str(e)}")
        return False

def load_dropdown_options():
    """Extrae las opciones de dropdowns din√°micamente desde Nubox."""
    try:
        # Extraer opciones reales de la p√°gina de Nubox
        if st.session_state.nubox_service:
            logger.info("Extrayendo opciones de dropdowns de la p√°gina de Nubox")
            dropdown_options = st.session_state.nubox_service.extract_dropdown_options()
            
            if dropdown_options:
                st.session_state.dropdown_options = dropdown_options
                logger.info(f"Opciones de dropdowns extra√≠das exitosamente: {len(dropdown_options)} dropdowns")
                return True
            else:
                logger.warning("No se pudieron extraer opciones reales, usando opciones de respaldo")
                # Fallback con opciones simuladas si no se pueden extraer
                st.session_state.dropdown_options = {
                    "Empresa": {
                        "options": [
                            "051, VERSE CONSULTORES LTDA",
                            "205, INSTITUTO DE CAP. Y GESTION SPA", 
                            "282, SUGA SPA",
                            "527, PUNTO HUMANO SPA",
                            "586, SERV. EMPRESARIALES INSERT PRO SPA",
                            "689, DELSO SPA",
                            "796, INVERSIONES LAS TRALCAS SPA",
                            "838, SERV. ASESORIAS EMP. NRED SPA",
                            "903, COMERCIALIZADORA INSERT S.A.",
                            "904, UAU TELECOM SPA",
                            "905, Paulo Subiabre Cepeda E. Individual",
                            "906, SELYT SPA"
                        ],
                        "selected": "051, VERSE CONSULTORES LTDA",
                        "name": "ComboEmpresa",
                        "index": 0
                    },
                    "Tipo de Reporte": {
                        "options": [
                            "ANALISIS POR CUENTA",
                            "BORRADOR", 
                            "OFICIAL SIN NOMBRE",
                            "OFICIAL CON NOMBRE"
                        ],
                        "selected": "ANALISIS POR CUENTA",
                        "name": "ComboTipoReporte",
                        "index": 1
                    },
                    "Formato de Salida": {
                        "options": ["PDF", "EXCEL"],
                        "selected": "PDF",
                        "name": "ComboFormato",
                        "index": 2
                    },
                    "Cuenta Contable": {
                        "options": [
                            "1101-01 CUENTA CAJA",
                            "1101-02 BANCO SANTANDER",
                            "1101-03 BANCO BCI",
                            "1104-01 CLIENTES NACIONALES",
                            "5101-01 VENTAS POR SERVICIO",
                            "4201-01 ARRIENDOS OFICINAS"
                        ],
                        "selected": "1101-01 CUENTA CAJA",
                        "name": "ComboCodigoSubcuenta",
                        "index": 3
                    },
                    "Incluir Subcuentas": {
                        "options": ["NO", "SI"],
                        "selected": "NO",
                        "name": "ComboIncluirSubcuentas",
                        "index": 4
                    }
                }
                logger.info("Usando opciones de respaldo predefinidas")
                return True
        else:
            logger.error("Servicio Nubox no disponible para extraer opciones")
            return False
    except Exception as e:
        logger.error(f"Error cargando opciones de dropdowns: {str(e)}")
        st.error(f"Error cargando opciones de dropdowns: {str(e)}")
        return False

def configure_parameters_programmatically(params, log_container):
    """Configura los par√°metros del reporte de forma program√°tica."""
    try:
        # Crear un objeto de par√°metros que el servicio pueda usar
        service_params = {
            'fecha_desde': params['fecha_desde'],  # Cambiar de 'nueva_fecha_desde' a 'fecha_desde'
            'fecha_hasta': params.get('fecha_hasta'),  # Cambiar de 'nueva_fecha_hasta' a 'fecha_hasta'
            'dropdown_selections': params['dropdown_selections']
        }
        
        with log_container:
            st.text(f"üìÖ Configurando fecha desde: {params['fecha_desde']}")
            if params.get('fecha_hasta'):
                st.text(f"üìÖ Configurando fecha hasta: {params['fecha_hasta']}")
            for dropdown, selection in params['dropdown_selections'].items():
                st.text(f"üîΩ {dropdown}: {selection}")
        
        # Llamar al m√©todo program√°tico del servicio
        success = st.session_state.nubox_service.set_report_parameters_programmatic(service_params)
        
        if success:
            with log_container:
                st.text("‚úÖ Configuraci√≥n program√°tica completada exitosamente")
        else:
            with log_container:
                st.text("‚ùå Error en la configuraci√≥n program√°tica")
        
        return success
        
    except Exception as e:
        with log_container:
            st.text(f"‚ùå Error configurando par√°metros: {str(e)}")
        return False

def show_multiple_results(results, selected_accounts):
    """Muestra los resultados de m√∫ltiples reportes extra√≠dos con exportaci√≥n autom√°tica a MongoDB."""
    st.markdown('<h2 class="section-header">üìä Resultados de M√∫ltiples Reportes</h2>', unsafe_allow_html=True)
    
    if not results or '_summary' not in results:
        st.error("‚ùå No se obtuvieron resultados v√°lidos de los reportes m√∫ltiples.")
        return
    
    summary = results['_summary']
    
    # Mostrar resumen general
    st.markdown("### üìà Resumen General")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üìä Total de Cuentas", summary['total_accounts'])
    with col2:
        st.metric("‚úÖ Exitosas", summary['successful_extractions'])
    with col3:
        st.metric("‚ùå Fallidas", summary['failed_extractions'])
    with col4:
        st.metric("üìà Tasa de √âxito", f"{summary['success_rate']:.1f}%")
    
    # Mostrar estado visual
    if summary['success_rate'] >= 80:
        st.success(f"üéâ ¬°Excelente! Se procesaron exitosamente {summary['successful_extractions']} de {summary['total_accounts']} cuentas.")
    elif summary['success_rate'] >= 50:
        st.warning(f"‚ö†Ô∏è Se procesaron {summary['successful_extractions']} de {summary['total_accounts']} cuentas. Revisa las que fallaron.")
    else:
        st.error(f"‚ùå Solo se procesaron {summary['successful_extractions']} de {summary['total_accounts']} cuentas exitosamente.")
    
    # Separar resultados exitosos y fallidos
    successful_results = []
    failed_results = []
    
    for account in selected_accounts:
        if account in results and account != '_summary':
            result = results[account]
            if result.get('success', False):
                successful_results.append((account, result))
            else:
                failed_results.append((account, result))
    
    # EXPORTACI√ìN AUTOM√ÅTICA A MONGODB PARA REPORTES M√öLTIPLES
    if successful_results:
        st.markdown("### üöÄ Exportaci√≥n Autom√°tica a MongoDB")
        
        with st.spinner(f"Exportando {len(successful_results)} reportes a MongoDB..."):
            try:
                from services.mongodb_client import NuboxMongoClient
                
                mongo_client = NuboxMongoClient()
                export_summary = {
                    'total_reportes': len(successful_results),
                    'exportados_exitosos': 0,
                    'exportados_fallidos': 0,
                    'document_ids': [],
                    'errores': []
                }
                
                # Exportar cada reporte exitoso
                for account, result in successful_results:
                    try:
                        df = result.get('data')
                        if df is not None and not df.empty:
                            # Extraer informaci√≥n de la empresa desde los atributos del DataFrame
                            company_info = df.attrs.get('company_info', {}) if hasattr(df, 'attrs') else {}
                            
                            # Preparar metadatos espec√≠ficos para esta cuenta
                            report_metadata = {
                                'archivo_origen': os.path.basename(result.get('file_path', '')) or 'streamlit_multiple_extraction',
                                'cuenta_contable': account,  # Usar la cuenta espec√≠fica
                                'fecha_extraccion': datetime.datetime.now().isoformat(),
                                'parametros_streamlit': {
                                    'formato_salida': 'EXCEL',
                                    'include_subcuentas': st.session_state.get('dropdown_options', {}).get('Incluir Subcuentas', {}).get('selected', 'NO'),
                                    'procesamiento_multiple': True,
                                    'total_cuentas_procesadas': len(successful_results)
                                }
                            }
                            
                            # Exportar a MongoDB
                            export_result = mongo_client.export_nubox_dataframe(
                                df=df,
                                company_info=company_info,
                                report_metadata=report_metadata
                            )
                            
                            if export_result['success']:
                                export_summary['exportados_exitosos'] += 1
                                export_summary['document_ids'].append({
                                    'cuenta': account,
                                    'document_id': export_result['document_id'],
                                    'filas': export_result['exported_rows']
                                })
                            else:
                                export_summary['exportados_fallidos'] += 1
                                export_summary['errores'].append({
                                    'cuenta': account,
                                    'errores': export_result['errors']
                                })
                        else:
                            export_summary['exportados_fallidos'] += 1
                            export_summary['errores'].append({
                                'cuenta': account,
                                'errores': ['DataFrame vac√≠o o no disponible']
                            })
                            
                    except Exception as e:
                        export_summary['exportados_fallidos'] += 1
                        export_summary['errores'].append({
                            'cuenta': account,
                            'errores': [str(e)]
                        })
                
                mongo_client.disconnect()
                
                # Mostrar resultado de la exportaci√≥n masiva
                if export_summary['exportados_exitosos'] > 0:
                    st.success(f"‚úÖ **{export_summary['exportados_exitosos']} reportes exportados exitosamente a MongoDB**")
                    
                    # Mostrar detalles de la exportaci√≥n m√∫ltiple
                    with st.expander("üìã Detalles de la Exportaci√≥n Masiva", expanded=False):
                        col1, col2, col3, col4 = st.columns(4)
                        
                        with col1:
                            st.metric("üìä Reportes Exportados", export_summary['exportados_exitosos'])
                        with col2:
                            st.metric("‚ùå Fallos de Exportaci√≥n", export_summary['exportados_fallidos'])
                        with col3:
                            total_filas = sum(doc['filas'] for doc in export_summary['document_ids'])
                            st.metric("üìù Total Filas", total_filas)
                        with col4:
                            st.metric("üìÖ Fecha", datetime.datetime.now().strftime('%d/%m/%Y %H:%M'))
                        
                        st.write("**IDs de Documentos Exportados:**")
                        for doc_info in export_summary['document_ids']:
                            st.write(f"- **{doc_info['cuenta']}**: `{doc_info['document_id']}` ({doc_info['filas']} filas)")
                        
                        st.write(f"**Colecci√≥n**: `test-nubox`")
                        st.write(f"**Base de Datos**: `buk-data`")
                        
                        if export_summary['errores']:
                            st.write("**Errores de Exportaci√≥n:**")
                            for error_info in export_summary['errores']:
                                st.write(f"- **{error_info['cuenta']}**: {', '.join(error_info['errores'])}")
                
                else:
                    st.error("‚ùå **No se pudo exportar ning√∫n reporte a MongoDB**")
                    if export_summary['errores']:
                        st.write("**Errores encontrados:**")
                        for error_info in export_summary['errores']:
                            st.write(f"- **{error_info['cuenta']}**: {', '.join(error_info['errores'])}")
                
            except ImportError:
                st.warning("‚ö†Ô∏è Cliente MongoDB no disponible. Instalar con: `pip install pymongo`")
            except Exception as e:
                st.error(f"‚ùå Error durante la exportaci√≥n masiva: {str(e)}")
    
    # Mostrar resultados exitosos
    if successful_results:
        st.markdown("### ‚úÖ Reportes Exitosos")
        
        # Crear tabs para cada reporte exitoso
        tab_names = []
        tab_data = []
        
        for i, (account, result) in enumerate(successful_results):
            # Crear nombre corto para la tab
            account_code = result.get('account_code', f'cuenta_{i+1}')
            tab_names.append(f"üìä {account_code}")
            tab_data.append((account, result))
        
        if len(tab_names) > 0:
            tabs = st.tabs(tab_names)
            
            for i, (tab, (account, result)) in enumerate(zip(tabs, tab_data)):
                with tab:
                    st.markdown(f"**Cuenta:** {account}")
                    
                    # M√©tricas del reporte individual
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric("üìä Filas", result.get('rows_count', 0))
                    with col2:
                        st.metric("üìã Columnas", result.get('columns_count', 0))
                    with col3:
                        file_status = "Descargado" if result.get('file_path') else "En memoria"
                        st.metric("üìÅ Archivo", file_status)
                    
                    # Mostrar preview de los datos si est√°n disponibles
                    df = result.get('data')
                    if df is not None and not df.empty:
                        st.markdown("**Vista previa de los datos:**")
                        st.dataframe(df.head(10), use_container_width=True)
                        
                        # Botones de descarga para este reporte
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            # Descargar CSV
                            csv_data = df.to_csv(index=False)
                            account_code = result.get('account_code', combination_key.replace(' ', '_'))
                            st.download_button(
                                label="üíæ Descargar CSV",
                                data=csv_data,
                                file_name=f"reporte_{account_code}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                                mime="text/csv",
                                key=f"csv_{combination_key}"
                            )
                        
                        with col2:
                            # Descargar Excel
                            excel_buffer = io.BytesIO()
                            df.to_excel(excel_buffer, index=False, engine='openpyxl')
                            excel_data = excel_buffer.getvalue()
                            
                            st.download_button(
                                label="üìä Descargar Excel",
                                data=excel_data,
                                file_name=f"reporte_{account_code}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                key=f"excel_{combination_key}"
                            )
                    else:
                        st.info("‚ÑπÔ∏è No hay datos para mostrar, pero el archivo fue descargado exitosamente.")
                    
                    # Mostrar informaci√≥n del archivo descargado
                    file_path = result.get('file_path')
                    if file_path and file_path != "Descarga no encontrada":
                        st.info(f"üìÅ Archivo descargado en: {file_path}")
    
    # Mostrar resultados fallidos
    if failed_results:
        st.markdown("### ‚ùå Reportes Fallidos")
        
        with st.expander(f"Ver detalles de {len(failed_results)} reportes fallidos", expanded=len(successful_results) == 0):
            for account, result in failed_results:
                error_msg = result.get('error', 'Error desconocido')
                st.error(f"**{account}**: {error_msg}")
    
    # Opci√≥n para descargar resumen completo
    st.markdown("### üìã Descarga del Resumen Completo")
    
    if successful_results:
        # Crear DataFrame combinado con informaci√≥n de resumen
        summary_data = []
        
        for account, result in successful_results + failed_results:
            summary_data.append({
                'Cuenta': account,
                'C√≥digo': result.get('account_code', ''),
                'Estado': 'Exitoso' if result.get('success', False) else 'Fallido',
                'Filas': result.get('rows_count', 0),
                'Columnas': result.get('columns_count', 0),
                'Archivo': result.get('file_path', '') if result.get('file_path') and result.get('file_path') != "Descarga no encontrada" else '',
                'Error': result.get('error', '') if not result.get('success', False) else ''
            })
        
        summary_df = pd.DataFrame(summary_data)
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Descargar resumen en CSV
            summary_csv = summary_df.to_csv(index=False)
            st.download_button(
                label="üìÑ Descargar Resumen CSV",
                data=summary_csv,
                file_name=f"resumen_reportes_multiples_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
        
        with col2:
            # Descargar resumen en Excel
            summary_excel_buffer = io.BytesIO()
            summary_df.to_excel(summary_excel_buffer, index=False, engine='openpyxl')
            summary_excel_data = summary_excel_buffer.getvalue()
            
            st.download_button(
                label="üìä Descargar Resumen Excel",
                data=summary_excel_data,
                file_name=f"resumen_reportes_multiples_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        
        # Mostrar tabla de resumen
        st.markdown("**Vista previa del resumen:**")
        st.dataframe(summary_df, use_container_width=True)

def show_results(df, file_path=None):
    """Muestra los resultados del reporte extra√≠do con an√°lisis mejorado y exportaci√≥n autom√°tica a MongoDB."""
    st.markdown('<h2 class="section-header">üìä Resultados del Reporte</h2>', unsafe_allow_html=True)
    
    if not df.empty:
        # Exportaci√≥n autom√°tica a MongoDB
        st.markdown("### üöÄ Exportaci√≥n Autom√°tica a MongoDB")
        
        with st.spinner("Exportando datos a MongoDB..."):
            try:
                from services.mongodb_client import NuboxMongoClient
                
                # Extraer informaci√≥n de la empresa desde los atributos del DataFrame
                company_info = df.attrs.get('company_info', {}) if hasattr(df, 'attrs') else {}
                
                # Preparar metadatos del reporte
                report_metadata = {
                    'archivo_origen': os.path.basename(file_path) if file_path else 'streamlit_extraction',
                    'cuenta_contable': st.session_state.get('dropdown_options', {}).get('Cuenta Contable', {}).get('selected', ''),
                    'fecha_extraccion': datetime.datetime.now().isoformat(),
                    'parametros_streamlit': {
                        'formato_salida': 'EXCEL',
                        'include_subcuentas': st.session_state.get('dropdown_options', {}).get('Incluir Subcuentas', {}).get('selected', 'NO')
                    }
                }
                
                # Crear cliente MongoDB y exportar
                mongo_client = NuboxMongoClient()
                export_result = mongo_client.export_nubox_dataframe(
                    df=df,
                    company_info=company_info,
                    report_metadata=report_metadata
                )
                
                if export_result['success']:
                    st.success(f"‚úÖ **Datos exportados exitosamente a MongoDB**")
                    
                    # Mostrar detalles de la exportaci√≥n en un expandidor
                    with st.expander("üìã Detalles de la Exportaci√≥n", expanded=False):
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            st.metric("üìä Filas Exportadas", export_result['exported_rows'])
                        with col2:
                            st.metric("üè¢ Empresa", company_info.get('Nombre', 'N/A'))
                        with col3:
                            st.metric("üìÖ Fecha", datetime.datetime.now().strftime('%d/%m/%Y %H:%M'))
                        
                        st.write(f"**ID del Documento**: `{export_result['document_id']}`")
                        st.write(f"**Colecci√≥n**: `{export_result['collection_name']}`")
                        st.write(f"**Base de Datos**: `nubox-data`")
                        
                        if company_info:
                            st.write("**Informaci√≥n de Empresa Exportada**:")
                            for key, value in company_info.items():
                                st.write(f"- **{key}**: {value}")
                else:
                    st.error("‚ùå **Error en la exportaci√≥n a MongoDB**")
                    if export_result['errors']:
                        st.write("**Errores encontrados**:")
                        for error in export_result['errors']:
                            st.write(f"- {error}")
                
                mongo_client.disconnect()
                
            except ImportError:
                st.warning("‚ö†Ô∏è Cliente MongoDB no disponible. Instalar con: `pip install pymongo`")
            except Exception as e:
                st.error(f"‚ùå Error durante la exportaci√≥n: {str(e)}")

        # Mostrar informaci√≥n del DataFrame
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üìä Filas", len(df))
        with col2:
            st.metric("üìã Columnas", len(df.columns))
        with col3:
            if file_path:
                st.metric("üìÅ Archivo", "Descargado")
            else:
                st.metric("üìÅ Archivo", "En memoria")
        with col4:
            # Calcular tama√±o estimado en MB
            size_mb = df.memory_usage(deep=True).sum() / (1024 * 1024)
            st.metric("üíæ Tama√±o", f"{size_mb:.2f} MB")

        # An√°lisis r√°pido del DataFrame
        st.markdown("### üìà An√°lisis R√°pido")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Informaci√≥n de tipos de datos
            with st.expander("üîç Tipos de Datos"):
                types_info = df.dtypes.value_counts()
                for dtype, count in types_info.items():
                    st.write(f"**{dtype}**: {count} columnas")
        
        with col2:
            # Informaci√≥n de valores nulos
            with st.expander("‚ùå Valores Nulos"):
                null_counts = df.isnull().sum()
                null_cols = null_counts[null_counts > 0]
                if len(null_cols) > 0:
                    for col, count in null_cols.items():
                        percentage = (count / len(df)) * 100
                        st.write(f"**{col}**: {count} ({percentage:.1f}%)")
                else:
                    st.write("‚úÖ No hay valores nulos")

        # Filtros para el DataFrame
        st.markdown("### üîç Filtros y Exploraci√≥n")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # Filtro por n√∫mero de filas a mostrar
            rows_to_show = st.selectbox(
                "Filas a mostrar",
                options=[10, 20, 50, 100, "Todas"],
                index=1
            )
        
        with col2:
            # Filtro por columnas
            all_columns = df.columns.tolist()
            selected_columns = st.multiselect(
                "Seleccionar columnas",
                options=all_columns,
                default=all_columns[:10] if len(all_columns) > 10 else all_columns
            )
        
        with col3:
            # Opci√≥n de b√∫squeda
            search_term = st.text_input(
                "Buscar en los datos",
                placeholder="Ingresa t√©rmino de b√∫squeda..."
            )

        # Aplicar filtros
        filtered_df = df.copy()
        
        if selected_columns:
            filtered_df = filtered_df[selected_columns]
        
        if search_term:
            # Buscar en todas las columnas de texto
            mask = False
            for col in filtered_df.select_dtypes(include=['object', 'string']).columns:
                mask |= filtered_df[col].astype(str).str.contains(search_term, case=False, na=False)
            
            if mask.any():
                filtered_df = filtered_df[mask]
                st.info(f"üîç Se encontraron {len(filtered_df)} filas que contienen '{search_term}'")
            else:
                st.warning(f"‚ö†Ô∏è No se encontraron resultados para '{search_term}'")

        # Mostrar preview de los datos filtrados
        st.markdown("### üëÄ Vista previa de los datos")
        
        if rows_to_show == "Todas":
            display_df = filtered_df
        else:
            display_df = filtered_df.head(rows_to_show)
        
        # Mostrar el DataFrame con mejor formato
        st.dataframe(
            display_df, 
            use_container_width=True,
            height=min(400, len(display_df) * 35 + 50)  # Altura din√°mica
        )
        
        # Informaci√≥n adicional del filtrado
        if len(filtered_df) != len(df):
            st.info(f"üìä Mostrando {len(display_df)} de {len(filtered_df)} filas filtradas (total: {len(df)} filas)")
        else:
            st.info(f"üìä Mostrando {len(display_df)} de {len(df)} filas totales")

        # An√°lisis estad√≠stico b√°sico para columnas num√©ricas
        numeric_columns = df.select_dtypes(include=['number']).columns
        if len(numeric_columns) > 0:
            st.markdown("### üìä Estad√≠sticas Descriptivas")
            
            with st.expander("Ver estad√≠sticas num√©ricas", expanded=False):
                st.dataframe(df[numeric_columns].describe(), use_container_width=True)

        # Opciones de descarga mejoradas
        st.markdown("### üíæ Opciones de Descarga")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # Bot√≥n para descargar CSV completo
            csv_data = df.to_csv(index=False)
            st.download_button(
                label="üíæ Descargar CSV Completo",
                data=csv_data,
                file_name=f"reporte_nubox_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
        
        with col2:
            # Bot√≥n para descargar Excel completo
            excel_buffer = io.BytesIO()
            df.to_excel(excel_buffer, index=False, engine='openpyxl')
            excel_data = excel_buffer.getvalue()
            
            st.download_button(
                label="üìä Descargar Excel Completo",
                data=excel_data,
                file_name=f"reporte_nubox_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        
        with col3:
            # Bot√≥n para descargar datos filtrados
            if len(filtered_df) != len(df) and not filtered_df.empty:
                filtered_csv = filtered_df.to_csv(index=False)
                st.download_button(
                    label="üîç Descargar Filtrados CSV",
                    data=filtered_csv,
                    file_name=f"reporte_filtrado_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv"
                )
        
        # Informaci√≥n adicional si hay archivo descargado
        if file_path:
            st.markdown("### üìÅ Informaci√≥n del Archivo")
            st.info(f"üìÅ El archivo original tambi√©n fue descargado en: {file_path}")
            
            # Mostrar informaci√≥n adicional del archivo
            try:
                file_size = os.path.getsize(file_path) / (1024 * 1024)  # MB
                st.write(f"**Tama√±o del archivo**: {file_size:.2f} MB")
                st.write(f"**Formato**: {os.path.splitext(file_path)[1].upper()}")
            except:
                pass

    else:
        st.markdown("### ‚ö†Ô∏è Problema con la Extracci√≥n")
        
        # Mostrar informaci√≥n detallada del error
        if file_path and file_path.startswith("Archivo inv√°lido:"):
            st.error("‚ùå **Archivo descargado inv√°lido**")
            
            # Mostrar alerta espec√≠fica sobre el problema de formato
            st.warning("üö® **Problema detectado**: El archivo tiene una extensi√≥n .xls pero su contenido no coincide con el formato Excel esperado.")
            
            st.markdown("""
            **Lo que est√° pasando**:
            - Nubox gener√≥ un archivo con extensi√≥n `.xls` 
            - Sin embargo, el contenido del archivo no es Excel v√°lido
            - Probablemente contiene HTML (p√°gina de error) o datos corruptos
            - macOS detecta esta inconsistencia y muestra la alerta de seguridad
            
            **Posibles causas**:
            - Nubox devolvi√≥ una p√°gina de error en lugar del reporte
            - La sesi√≥n de Nubox expir√≥ durante la generaci√≥n
            - Los par√°metros del reporte no son v√°lidos
            - Problemas temporales en el servidor de Nubox
            - L√≠mites de datos excedidos en el reporte
            """)
            
            # Mostrar la ruta del archivo problem√°tico
            actual_path = file_path.replace("Archivo inv√°lido: ", "")
            st.info(f"üìÅ Archivo problem√°tico: `{os.path.basename(actual_path)}`")
            
            # Crear an√°lisis detallado del archivo
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button("üîç Analizar Contenido del Archivo", key="analyze_file"):
                    try:
                        file_size = os.path.getsize(actual_path) / 1024  # KB
                        
                        with open(actual_path, 'r', encoding='utf-8', errors='ignore') as f:
                            content = f.read(2000)  # Primeros 2000 caracteres
                        
                        st.markdown("### üìã An√°lisis del Archivo")
                        st.write(f"**Tama√±o**: {file_size:.2f} KB")
                        st.write(f"**Nombre**: {os.path.basename(actual_path)}")
                        
                        # Detectar tipo de contenido
                        if '<html' in content.lower():
                            st.error("üåê **Tipo detectado**: P√°gina HTML")
                            st.write("El archivo contiene c√≥digo HTML en lugar de datos Excel.")
                            
                            # Buscar t√≠tulos o mensajes espec√≠ficos
                            import re
                            title_match = re.search(r'<title>(.*?)</title>', content, re.IGNORECASE)
                            if title_match:
                                st.write(f"**T√≠tulo de la p√°gina**: {title_match.group(1)}")
                            
                        elif 'error' in content.lower():
                            st.error("üö´ **Tipo detectado**: Mensaje de error")
                            
                            # Buscar mensajes de error espec√≠ficos
                            error_keywords = ['error', 'timeout', 'session', 'expired', 'invalid']
                            found_errors = [word for word in error_keywords if word in content.lower()]
                            if found_errors:
                                st.write(f"**Palabras de error encontradas**: {', '.join(found_errors)}")
                        
                        elif file_size < 1:
                            st.warning("üìÑ **Tipo detectado**: Archivo muy peque√±o o vac√≠o")
                        
                        else:
                            st.info("‚ùì **Tipo detectado**: Contenido desconocido")
                        
                        # Mostrar contenido en un expandidor
                        with st.expander("Ver contenido del archivo", expanded=False):
                            st.code(content[:1000], language="html")
                            if len(content) > 1000:
                                st.write(f"... y {len(content) - 1000} caracteres m√°s")
                        
                    except Exception as e:
                        st.error(f"No se pudo analizar el archivo: {str(e)}")
            
            with col2:
                if st.button("üîß Soluciones Recomendadas", key="solutions"):
                    st.markdown("### üõ†Ô∏è Pasos para Resolver")
                    
                    solutions = [
                        "1. **Verificar sesi√≥n**: Aseg√∫rate de que tu sesi√≥n en Nubox sigue activa",
                        "2. **Validar par√°metros**: Confirma que las fechas y filtros sean correctos",
                        "3. **Reducir alcance**: Prueba con un rango de fechas m√°s peque√±o",
                        "4. **Cambiar formato**: En Nubox, selecciona 'PDF' en lugar de 'Excel'",
                        "5. **Reintentar**: Espera unos minutos y vuelve a intentar",
                        "6. **Limpiar cookies**: Borra las cookies del navegador para Nubox"
                    ]
                    
                    for solution in solutions:
                        st.write(solution)
                    
                    st.info("üí° **Consejo**: Si el problema persiste, es probable que sea un problema temporal de Nubox.")
            
            # Botones de acci√≥n
            st.markdown("### üéØ Acciones Disponibles")
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                if st.button("üóëÔ∏è Eliminar Archivo", key="delete_file"):
                    try:
                        os.remove(actual_path)
                        st.success("‚úÖ Archivo eliminado")
                        time.sleep(1)
                        st.rerun()
                    except Exception as e:
                        st.error(f"Error al eliminar: {str(e)}")
            
            with col2:
                if st.button("üìÅ Abrir Carpeta", key="open_folder"):
                    import subprocess
                    subprocess.run(["open", str(Path.home() / "Downloads")])
                    st.info("üìÇ Carpeta de descargas abierta")
            
            with col3:
                if st.button("üîÑ Reintentar", key="retry"):
                    st.rerun()
            
            with col4:
                if st.button("üÜï Proceso Nuevo", key="new_process"):
                    # Limpiar estado y reiniciar
                    for key in list(st.session_state.keys()):
                        if key.startswith(('logged_in', 'navigation_complete', 'report_generated')):
                            del st.session_state[key]
                    st.rerun()
        elif file_path and file_path.startswith("Error de lectura:"):
            st.error("‚ùå **Error al leer el archivo Excel**")
            st.markdown("""
            **Problema**: El archivo se descarg√≥ pero no se puede leer como Excel.
            
            **Posibles soluciones**:
            1. Verificar que el archivo no est√© corrupto
            2. Intentar abrirlo manualmente en Excel
            3. Cambiar el formato de salida a PDF y luego convertir
            4. Contactar soporte de Nubox si el problema persiste
            """)
            
            actual_path = file_path.replace("Error de lectura: ", "")
            st.info(f"üìÅ Archivo descargado: `{actual_path}`")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üìÅ Abrir Carpeta de Descargas"):
                    import subprocess
                    subprocess.run(["open", str(Path.home() / "Downloads")])
            
            with col2:
                if st.button("üîÑ Reintentar Extracci√≥n"):
                    st.rerun()
                    
        elif file_path == "Descarga no encontrada":
            st.error("‚ùå **No se encontr√≥ archivo descargado**")
            st.markdown("""
            **Problema**: No se detect√≥ ning√∫n archivo Excel reciente en la carpeta de descargas.
            
            **Posibles causas**:
            - La descarga no se complet√≥
            - El archivo se guard√≥ en otra ubicaci√≥n
            - El proceso de generaci√≥n fall√≥ en Nubox
            - Bloqueador de pop-ups impidi√≥ la descarga
            """)
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("üìÅ Verificar Descargas"):
                    # Mostrar archivos recientes en Downloads
                    downloads_folder = Path.home() / "Downloads"
                    excel_files = list(downloads_folder.glob("*.xls*"))
                    
                    if excel_files:
                        # Ordenar por fecha de modificaci√≥n
                        excel_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
                        
                        st.markdown("**Archivos Excel encontrados:**")
                        for file in excel_files[:5]:  # Mostrar solo los 5 m√°s recientes
                            mtime = datetime.datetime.fromtimestamp(file.stat().st_mtime)
                            st.write(f"- `{file.name}` (modificado: {mtime.strftime('%d/%m/%Y %H:%M')})")
                    else:
                        st.warning("No se encontraron archivos Excel en la carpeta de descargas.")
            
            with col2:
                if st.button("‚è±Ô∏è Esperar y Reintentar"):
                    with st.spinner("Esperando 30 segundos m√°s para la descarga..."):
                        time.sleep(30)
                    st.rerun()
            
            with col3:
                if st.button("üîÑ Reintentar Proceso"):
                    st.rerun()
        else:
            st.warning("‚ö†Ô∏è No se pudieron extraer datos del reporte. Revisa los logs para m√°s informaci√≥n.")
            
            # Informaci√≥n de diagn√≥stico
            with st.expander("üîß Informaci√≥n de Diagn√≥stico"):
                st.markdown("""
                **Pasos de diagn√≥stico**:
                1. Verifica que est√©s conectado a Nubox
                2. Confirma que los par√°metros del reporte son v√°lidos
                3. Aseg√∫rate de que no hay bloqueadores de descarga
                4. Revisa los logs detallados para errores espec√≠ficos
                """)
            
            # Opciones de recuperaci√≥n
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("üîÑ Reintentar Extracci√≥n"):
                    st.rerun()
            
            with col2:
                if st.button("üß≠ Verificar Navegaci√≥n"):
                    if st.session_state.get('nubox_service'):
                        try:
                            # Tomar captura de pantalla para diagn√≥stico
                            st.session_state.nubox_service.browser_manager.take_screenshot("diagnostico_estado_actual.png")
                            st.success("‚úÖ Captura de diagn√≥stico guardada en la carpeta logs/")
                        except:
                            st.error("‚ùå No se pudo tomar captura de diagn√≥stico")
                    else:
                        st.warning("‚ö†Ô∏è Servicio Nubox no disponible")
            
            with col3:
                if st.button("üÜï Reiniciar Todo"):
                    # Limpiar completamente el estado
                    if st.session_state.get('nubox_service'):
                        st.session_state.nubox_service.close()
                    
                    for key in list(st.session_state.keys()):
                        del st.session_state[key]
                    
                    st.success("üîÑ Estado reiniciado. Recarga la p√°gina para empezar de nuevo.")
                    st.rerun()

def initialize_rpa_process(username, password, custom_url, headless, timeout, progress_container, log_container):
    """Inicializa el proceso RPA: login y navegaci√≥n hasta cargar los dropdowns."""
    try:
        # Configurar logger
        logger = setup_logger()
        config = setup_config()
        
        with progress_container:
            # Barra de progreso para inicializaci√≥n
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            # Paso 1: Inicializar servicio
            status_text.text("üîÑ Inicializando servicio Nubox...")
            progress_bar.progress(10)
            
            if not st.session_state.nubox_service:
                st.session_state.nubox_service = NuboxService(headless=headless, timeout=timeout)
            
            with log_container:
                st.text("‚úÖ Servicio Nubox inicializado")
            
            # Paso 2: Login
            if not st.session_state.logged_in:
                status_text.text("üîê Iniciando sesi√≥n en Nubox...")
                progress_bar.progress(30)
                
                login_success = st.session_state.nubox_service.login(username, password, custom_url)
                
                if login_success:
                    st.session_state.logged_in = True
                    with log_container:
                        st.text("‚úÖ Login exitoso")
                else:
                    with log_container:
                        st.text("‚ùå Error en login")
                    st.error("‚ùå Error al conectar con Nubox. Verifica tus credenciales.")
                    return False
            
            # Paso 3: Navegaci√≥n
            if not st.session_state.navigation_complete:
                status_text.text("üß≠ Navegando al reporte Mayor...")
                progress_bar.progress(60)
                
                navigation_success = st.session_state.nubox_service.navigate_to_report()
                
                if navigation_success:
                    st.session_state.navigation_complete = True
                    with log_container:
                        st.text("‚úÖ Navegaci√≥n completada")
                    
                    # Cargar opciones de dropdowns
                    status_text.text("üìã Cargando opciones de par√°metros...")
                    progress_bar.progress(80)
                    
                    load_dropdown_options()
                    
                    with log_container:
                        st.text("‚úÖ Opciones de par√°metros cargadas")
                    
                    progress_bar.progress(100)
                    status_text.text("‚úÖ ¬°Inicializaci√≥n completada!")
                    
                    return True
                else:
                    with log_container:
                        st.text("‚ùå Error en navegaci√≥n")
                    st.error("‚ùå Error al navegar al reporte. Intenta nuevamente.")
                    return False
            
            return True
            
    except Exception as e:
        with log_container:
            st.text(f"‚ùå Error en inicializaci√≥n: {str(e)}")
        st.error(f"‚ùå Error durante la inicializaci√≥n: {str(e)}")
        return False

def extract_report_process(fecha_desde, fecha_hasta, dropdown_selections, selected_accounts, selected_companies, progress_container, log_container):
    """Extrae el reporte con los par√°metros configurados."""
    try:
        # Determinar el tipo de procesamiento
        is_multiple_accounts = len(selected_accounts) > 1
        is_multiple_companies = len(selected_companies) > 1
        is_multiple_processing = is_multiple_accounts or is_multiple_companies
        
        with progress_container:
            # Barra de progreso para extracci√≥n
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            # Preparar par√°metros base
            base_params = {
                'fecha_desde': fecha_desde.strftime("%d/%m/%Y"),
                'fecha_hasta': fecha_hasta.strftime("%d/%m/%Y"),
                'dropdown_selections': dropdown_selections
            }
            
            # Procesar seg√∫n el modo
            if is_multiple_processing:
                # MODO M√öLTIPLE (empresas y/o cuentas)
                total_combinations = len(selected_companies) * len(selected_accounts)
                status_text.text(f"üìä Procesando {total_combinations} combinaciones ({len(selected_companies)} empresas √ó {len(selected_accounts)} cuentas)...")
                progress_bar.progress(20)
                
                with log_container:
                    st.text(f"üî¢ Iniciando procesamiento m√∫ltiple:")
                    st.text(f"  - Empresas: {len(selected_companies)}")
                    st.text(f"  - Cuentas: {len(selected_accounts)}")
                    st.text(f"  - Total combinaciones: {total_combinations}")
                
                # Llamar al nuevo m√©todo de extracci√≥n m√∫ltiple por empresas y cuentas
                results = st.session_state.nubox_service.extract_multiple_reports_by_company_and_account(
                    base_params, selected_companies, selected_accounts
                )
                
                progress_bar.progress(95)
                
                # Procesar y mostrar resultados m√∫ltiples
                if results and '_summary' in results:
                    summary = results['_summary']
                    
                    with log_container:
                        st.text(f"‚úÖ Extracci√≥n completada:")
                        st.text(f"  - Total combinaciones: {summary.get('total_combinaciones', total_combinations)}")
                        st.text(f"  - Exitosas: {summary['successful_extractions']}")
                        st.text(f"  - Fallidas: {summary['failed_extractions']}")
                        st.text(f"  - Tasa de √©xito: {summary['success_rate']:.1f}%")
                    
                    progress_bar.progress(100)
                    status_text.text("‚úÖ ¬°Proceso m√∫ltiple completado!")
                    
                    # Mostrar resultados m√∫ltiples con nueva funci√≥n
                    show_multiple_company_account_results(results, selected_companies, selected_accounts)
                    
                    return True
                else:
                    with log_container:
                        st.text("‚ùå Error en la extracci√≥n m√∫ltiple")
                    st.error("‚ùå No se pudieron extraer los reportes.")
                    return False
                    
            else:
                # MODO UNA SOLA COMBINACI√ìN
                status_text.text("‚öôÔ∏è Configurando par√°metros del reporte...")
                progress_bar.progress(25)
                
                # Configurar par√°metros usando el m√©todo automatizado
                config_success = configure_parameters_programmatically(base_params, log_container)
                
                if config_success:
                    with log_container:
                        st.text("‚úÖ Par√°metros configurados correctamente")
                    progress_bar.progress(50)
                else:
                    with log_container:
                        st.text("‚ùå Error al configurar par√°metros")
                    st.error("‚ùå Error al configurar par√°metros del reporte.")
                    return False
                
                # Generar y extraer reporte √∫nico
                status_text.text("üìä Generando y extrayendo reporte...")
                progress_bar.progress(75)
                
                report_data = st.session_state.nubox_service.extract_report()
                
                if isinstance(report_data, tuple):
                    df, file_path = report_data
                else:
                    df = report_data
                    file_path = None
                
                progress_bar.progress(100)
                status_text.text("‚úÖ ¬°Extracci√≥n completada!")
                
                with log_container:
                    st.text("‚úÖ Reporte extra√≠do exitosamente")
                
                st.session_state.report_generated = True
                
                # Mostrar resultados √∫nicos
                show_results(df, file_path)
                
                return True

    except Exception as e:
        with log_container:
            st.text(f"‚ùå Error en extracci√≥n: {str(e)}")
        st.error(f"‚ùå Error durante la extracci√≥n: {str(e)}")
        return False

def show_multiple_company_account_results(results, selected_companies, selected_accounts):
    """Muestra los resultados de m√∫ltiples reportes extra√≠dos para empresas y cuentas con exportaci√≥n autom√°tica a MongoDB."""
    st.markdown('<h2 class="section-header">üìä Resultados de M√∫ltiples Empresas y Cuentas</h2>', unsafe_allow_html=True)
    
    if not results or '_summary' not in results:
        st.error("‚ùå No se obtuvieron resultados v√°lidos de los reportes m√∫ltiples.")
        return
    
    summary = results['_summary']
    
    # Mostrar resumen general
    st.markdown("### üìà Resumen General")
    
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("üè¢ Empresas", len(selected_companies))
    with col2:
        st.metric("üí∞ Cuentas", len(selected_accounts))
    with col3:
        st.metric("üìä Total Combinaciones", summary.get('total_combinaciones', len(selected_companies) * len(selected_accounts)))
    with col4:
        st.metric("‚úÖ Exitosas", summary['successful_extractions'])
    with col5:
        st.metric("üìà Tasa de √âxito", f"{summary['success_rate']:.1f}%")
    
    # Mostrar estado visual mejorado
    total_expected = len(selected_companies) * len(selected_accounts)
    if summary['success_rate'] >= 80:
        st.success(f"üéâ ¬°Excelente! Se procesaron exitosamente {summary['successful_extractions']} de {total_expected} combinaciones empresa-cuenta.")
    elif summary['success_rate'] >= 50:
        st.warning(f"‚ö†Ô∏è Se procesaron {summary['successful_extractions']} de {total_expected} combinaciones. Revisa las que fallaron.")
    else:
        st.error(f"‚ùå Solo se procesaron {summary['successful_extractions']} de {total_expected} combinaciones exitosamente.")
    
    # Separar resultados exitosos y fallidos
    successful_results = []
    failed_results = []
    
    # El formato de results ahora incluye combinaciones empresa-cuenta
    for combination_key, result in results.items():
        if combination_key != '_summary':
            if result.get('success', False):
                successful_results.append((combination_key, result))
            else:
                failed_results.append((combination_key, result))
    
    # EXPORTACI√ìN AUTOM√ÅTICA A MONGODB PARA REPORTES M√öLTIPLES
    if successful_results:
        st.markdown("### üöÄ Exportaci√≥n Autom√°tica a MongoDB")
        
        with st.spinner(f"Exportando {len(successful_results)} reportes a MongoDB..."):
            try:
                from services.mongodb_client import NuboxMongoClient
                
                mongo_client = NuboxMongoClient()
                export_summary = {
                    'total_reportes': len(successful_results),
                    'exportados_exitosos': 0,
                    'exportados_fallidos': 0,
                    'document_ids': [],
                    'errores': []
                }
                
                # Exportar cada reporte exitoso
                for combination_key, result in successful_results:
                    try:
                        df = result.get('data')
                        if df is not None and not df.empty:
                            # Extraer informaci√≥n de la empresa desde los atributos del DataFrame
                            company_info = df.attrs.get('company_info', {}) if hasattr(df, 'attrs') else {}
                            
                            # Preparar metadatos espec√≠ficos para esta combinaci√≥n
                            report_metadata = {
                                'archivo_origen': os.path.basename(result.get('file_path', '')) or 'streamlit_multiple_extraction',
                                'empresa': result.get('company', ''),
                                'cuenta_contable': result.get('account', ''),
                                'combinacion': combination_key,
                                'fecha_extraccion': datetime.datetime.now().isoformat(),
                                'parametros_streamlit': {
                                    'formato_salida': 'EXCEL',
                                    'include_subcuentas': st.session_state.get('dropdown_options', {}).get('Incluir Subcuentas', {}).get('selected', 'NO'),
                                    'procesamiento_multiple': True,
                                    'total_empresas': len(selected_companies),
                                    'total_cuentas': len(selected_accounts),
                                    'total_combinaciones': len(successful_results)
                                }
                            }
                            
                            # Exportar a MongoDB
                            export_result = mongo_client.export_nubox_dataframe(
                                df=df,
                                company_info=company_info,
                                report_metadata=report_metadata
                            )
                            
                            if export_result['success']:
                                export_summary['exportados_exitosos'] += 1
                                export_summary['document_ids'].append({
                                    'combinacion': combination_key,
                                    'empresa': result.get('company', ''),
                                    'cuenta': result.get('account', ''),
                                    'document_id': export_result['document_id'],
                                    'filas': export_result['exported_rows']
                                })
                            else:
                                export_summary['exportados_fallidos'] += 1
                                export_summary['errores'].append({
                                    'combinacion': combination_key,
                                    'errores': export_result['errors']
                                })
                        else:
                            export_summary['exportados_fallidos'] += 1
                            export_summary['errores'].append({
                                'combinacion': combination_key,
                                'errores': ['DataFrame vac√≠o o no disponible']
                            })
                            
                    except Exception as e:
                        export_summary['exportados_fallidos'] += 1
                        export_summary['errores'].append({
                            'combinacion': combination_key,
                            'errores': [str(e)]
                        })
                
                mongo_client.disconnect()
                
                # Mostrar resultado de la exportaci√≥n masiva
                if export_summary['exportados_exitosos'] > 0:
                    st.success(f"‚úÖ **{export_summary['exportados_exitosos']} reportes exportados exitosamente a MongoDB**")
                    
                    # Mostrar detalles de la exportaci√≥n m√∫ltiple
                    with st.expander("üìã Detalles de la Exportaci√≥n Masiva", expanded=False):
                        col1, col2, col3, col4 = st.columns(4)
                        
                        with col1:
                            st.metric("üìä Reportes Exportados", export_summary['exportados_exitosos'])
                        with col2:
                            st.metric("‚ùå Fallos de Exportaci√≥n", export_summary['exportados_fallidos'])
                        with col3:
                            total_filas = sum(doc['filas'] for doc in export_summary['document_ids'])
                            st.metric("üìù Total Filas", total_filas)
                        with col4:
                            st.metric("üìÖ Fecha", datetime.datetime.now().strftime('%d/%m/%Y %H:%M'))
                        
                        st.write("**IDs de Documentos Exportados:**")
                        for doc_info in export_summary['document_ids']:
                            st.write(f"- **{doc_info['empresa']} - {doc_info['cuenta']}**: `{doc_info['document_id']}` ({doc_info['filas']} filas)")
                        
                        st.write(f"**Colecci√≥n**: `test-nubox`")
                        st.write(f"**Base de Datos**: `nubox-data`")
                        
                        if export_summary['errores']:
                            st.write("**Errores de Exportaci√≥n:**")
                            for error_info in export_summary['errores']:
                                st.write(f"- **{error_info['combinacion']}**: {', '.join(error_info['errores'])}")
                
                else:
                    st.error("‚ùå **No se pudo exportar ning√∫n reporte a MongoDB**")
                    if export_summary['errores']:
                        st.write("**Errores encontrados:**")
                        for error_info in export_summary['errores']:
                            st.write(f"- **{error_info['combinacion']}**: {', '.join(error_info['errores'])}")
                
            except ImportError:
                st.warning("‚ö†Ô∏è Cliente MongoDB no disponible. Instalar con: `pip install pymongo`")
            except Exception as e:
                st.error(f"‚ùå Error durante la exportaci√≥n masiva: {str(e)}")
    
    # Mostrar resultados exitosos organizados por empresa
    if successful_results:
        st.markdown("### ‚úÖ Reportes Exitosos")
        
        # Organizar resultados por empresa
        results_by_company = {}
        for combination_key, result in successful_results:
            company = result.get('company', 'Empresa desconocida')
            if company not in results_by_company:
                results_by_company[company] = []
            results_by_company[company].append((combination_key, result))
        
        # Crear tabs por empresa
        if results_by_company:
            company_tabs = st.tabs([f"üè¢ {company.split(',')[0].strip()}" for company in results_by_company.keys()])
            
            for company_tab, (company, company_results) in zip(company_tabs, results_by_company.items()):
                with company_tab:
                    st.markdown(f"**Empresa:** {company}")
                    st.markdown(f"**Reportes generados:** {len(company_results)}")
                    
                    # Sub-tabs para cada cuenta dentro de la empresa
                    if len(company_results) > 1:
                        account_tab_names = []
                        for combination_key, result in company_results:
                            account = result.get('account', 'Cuenta desconocida')
                            account_code = account.split(' ')[0] if ' ' in account else account
                            account_tab_names.append(f"üí∞ {account_code}")
                        
                        account_tabs = st.tabs(account_tab_names)
                        
                        for account_tab, (combination_key, result) in zip(account_tabs, company_results):
                            with account_tab:
                                _show_individual_report_result(combination_key, result)
                    else:
                        # Solo una cuenta, mostrar directamente
                        combination_key, result = company_results[0]
                        _show_individual_report_result(combination_key, result)
    
    # Mostrar resultados fallidos
    if failed_results:
        st.markdown("### ‚ùå Reportes Fallidos")
        
        with st.expander(f"Ver detalles de {len(failed_results)} reportes fallidos", expanded=len(successful_results) == 0):
            for combination_key, result in failed_results:
                error_msg = result.get('error', 'Error desconocido')
                company = result.get('company', 'Empresa desconocida')
                account = result.get('account', 'Cuenta desconocida')
                st.error(f"**{company} - {account}**: {error_msg}")
    
    # Opci√≥n para descargar resumen completo
    st.markdown("### üìã Descarga del Resumen Completo")
    
    if successful_results or failed_results:
        # Crear DataFrame combinado con informaci√≥n de resumen
        summary_data = []
        
        for combination_key, result in successful_results + failed_results:
            summary_data.append({
                'Combinaci√≥n': combination_key,
                'Empresa': result.get('company', ''),

                'Cuenta': result.get('account', ''),
                'C√≥digo Cuenta': result.get('account_code', ''),
                'Estado': 'Exitoso' if result.get('success', False) else 'Fallido',
                'Filas': result.get('rows_count', 0),
                'Columnas': result.get('columns_count', 0),
                'Archivo': result.get('file_path', '') if result.get('file_path') and result.get('file_path') != "Descarga no encontrada" else '',
                'Error': result.get('error', '') if not result.get('success', False) else ''
            })
        
        summary_df = pd.DataFrame(summary_data)
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Descargar resumen en CSV
            summary_csv = summary_df.to_csv(index=False)
            st.download_button(
                label="üìÑ Descargar Resumen CSV",
                data=summary_csv,
                file_name=f"resumen_reportes_multiples_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
        
        with col2:
            # Descargar resumen en Excel
            summary_excel_buffer = io.BytesIO()
            summary_df.to_excel(summary_excel_buffer, index=False, engine='openpyxl')
            summary_excel_data = summary_excel_buffer.getvalue()
            
            st.download_button(
                label="üìä Descargar Resumen Excel",
                data=summary_excel_data,
                file_name=f"resumen_reportes_multiples_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        
        # Mostrar tabla de resumen
        st.markdown("**Vista previa del resumen:**")
        st.dataframe(summary_df, use_container_width=True)

def _show_individual_report_result(combination_key, result):
    """Funci√≥n auxiliar para mostrar un resultado individual de reporte."""
    account = result.get('account', 'Cuenta desconocida')
    
    # M√©tricas del reporte individual
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("üìä Filas", result.get('rows_count', 0))
    with col2:
        st.metric("üìã Columnas", result.get('columns_count', 0))
    with col3:
        file_status = "Descargado" if result.get('file_path') else "En memoria"
        st.metric("üìÅ Archivo", file_status)
    
    # Mostrar preview de los datos si est√°n disponibles
    df = result.get('data')
    if df is not None and not df.empty:
        st.markdown("**Vista previa de los datos:**")
        st.dataframe(df.head(10), use_container_width=True)
        
        # Botones de descarga para este reporte
        col1, col2 = st.columns(2)
        
        with col1:
            # Descargar CSV
            csv_data = df.to_csv(index=False)
            account_code = result.get('account_code', combination_key.replace(' ', '_'))
            st.download_button(
                label="üíæ Descargar CSV",
                data=csv_data,
                file_name=f"reporte_{account_code}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv",
                key=f"csv_{combination_key}"
            )
        
        with col2:
            # Descargar Excel
            excel_buffer = io.BytesIO()
            df.to_excel(excel_buffer, index=False, engine='openpyxl')
            excel_data = excel_buffer.getvalue()
            
            st.download_button(
                label="üìä Descargar Excel",
                data=excel_data,
                file_name=f"reporte_{account_code}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                key=f"excel_{combination_key}"
            )
    else:
        st.info("‚ÑπÔ∏è No hay datos para mostrar, pero el archivo fue descargado exitosamente.")
    
    # Mostrar informaci√≥n del archivo descargado
    file_path = result.get('file_path')
    if file_path and file_path != "Descarga no encontrada":
        st.info(f"üìÅ Archivo descargado en: {file_path}")

def main():
    """Funci√≥n principal de la aplicaci√≥n Streamlit."""
    
    # Inicializar estado de la sesi√≥n
    initialize_session_state()
    
    # T√≠tulo principal
    st.markdown('<h1 class="main-header">ü§ñ RPA Nubox - Extractor de Reportes</h1>', unsafe_allow_html=True)
    
    # Sidebar con configuraci√≥n
    headless, timeout = sidebar_configuration()
    
    # Secci√≥n de login
    username, password, custom_url = login_section()
    
    # Secci√≥n de par√°metros del reporte
    fecha_desde, fecha_hasta, dropdown_selections, selected_accounts, selected_companies = report_parameters_section()
    
    # Secci√≥n de progreso
    progress_container, log_container = progress_section()
    
    # Botones de control principal
    st.markdown('<h2 class="section-header">üéÆ Control del Proceso</h2>', unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # Bot√≥n para inicializar (login + navegaci√≥n)
        if st.button("üöÄ Inicializar RPA", type="primary", use_container_width=True):
            if username and password:
                success = initialize_rpa_process(
                    username, password, custom_url, headless, timeout, 
                    progress_container, log_container
                )
                if success:
                    st.success("‚úÖ RPA inicializado. Ahora puedes configurar par√°metros y extraer reportes.")
                    st.rerun()
            else:
                st.error("‚ùå Por favor ingresa usuario y contrase√±a.")
    
    with col2:
        # Bot√≥n para extraer reportes (solo activo si est√° inicializado)
        extract_disabled = not (st.session_state.logged_in and st.session_state.navigation_complete)
        
        if st.button("üìä Extraer Reportes", disabled=extract_disabled, use_container_width=True):
            if dropdown_selections and (selected_accounts or selected_companies):
                success = extract_report_process(
                    fecha_desde, fecha_hasta, dropdown_selections, 
                    selected_accounts, selected_companies,
                    progress_container, log_container
                )
                if success:
                    st.balloons()
            else:
                st.error("‚ùå Primero configura los par√°metros del reporte.")
    
    with col3:
        # Bot√≥n para reiniciar todo
        if st.button("üîÑ Reiniciar Todo", use_container_width=True):
            # Cerrar servicio si existe
            if st.session_state.get('nubox_service'):
                try:
                    st.session_state.nubox_service.close()
                except:
                    pass
            
            # Limpiar estado
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            
            st.success("üîÑ Estado reiniciado. Recargando p√°gina...")
            time.sleep(1)
            st.rerun()
    
    # Informaci√≥n adicional en el footer
    st.markdown("---")
    st.markdown("### üìã Estado del Sistema")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        login_status = "‚úÖ Conectado" if st.session_state.logged_in else "‚ùå Desconectado"
        st.info(f"**Login**: {login_status}")
    
    with col2:
        nav_status = "‚úÖ Completada" if st.session_state.navigation_complete else "‚è≥ Pendiente"
        st.info(f"**Navegaci√≥n**: {nav_status}")
    
    with col3:
        params_status = "‚úÖ Cargados" if st.session_state.dropdown_options else "‚è≥ Pendientes"
        st.info(f"**Par√°metros**: {params_status}")
    
    with col4:
        report_status = "‚úÖ Generado" if st.session_state.report_generated else "‚è≥ Pendiente"
        st.info(f"**Reporte**: {report_status}")
    
    # Informaci√≥n de ayuda
    with st.expander("‚ÑπÔ∏è Ayuda y Consejos"):
        st.markdown("""
        ### üîß C√≥mo usar el RPA Nubox
        
        1. **Inicializar**: Ingresa tus credenciales y haz clic en "Inicializar RPA"
        2. **Configurar**: Una vez inicializado, selecciona empresas y cuentas
        3. **Extraer**: Haz clic en "Extraer Reportes" para procesar
        4. **Descargar**: Los resultados se mostrar√°n con opciones de descarga
        
        ### üéØ Consejos para mejor rendimiento
        
        - **Modo headless**: Mant√©n activado para mejor rendimiento
        - **Timeout**: Aumenta si tienes conexi√≥n lenta
        - **M√∫ltiples reportes**: El sistema procesa autom√°ticamente en lotes
        - **MongoDB**: Los datos se exportan autom√°ticamente
        
        ### üö® Soluci√≥n de problemas
        
        - **Error de login**: Verifica credenciales y conexi√≥n
        - **Archivos inv√°lidos**: Reinicia e intenta con menos reportes
        - **Navegaci√≥n fallida**: Aumenta el timeout
        - **Proceso lento**: Usa modo headless y reduce combinaciones
        """)

if __name__ == "__main__":
    main()